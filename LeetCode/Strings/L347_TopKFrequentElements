https://leetcode.com/problems/top-k-frequent-elements/

Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
 

Constraints:

1 <= nums.length <= 105
k is in the range [1, the number of unique elements in the array].
It is guaranteed that the answer is unique.
 

Follow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.

--------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        int res[] = new int[k];
    	
    	Map<Integer, Integer> frequentMap = new HashMap<>();
    	for(int i : nums)
    		frequentMap.put(i, frequentMap.getOrDefault(i, 0)+1);
    	
    	PriorityQueue < Integer > minHeap = new PriorityQueue < > (
                (n1, n2) -> frequentMap.get(n1) - frequentMap.get(n2));
    	for(int key : frequentMap.keySet()) {
    		minHeap.add(key);
    		if(minHeap.size()>k) minHeap.poll();
    	}
    	for(int i=0 ; i<k ; i++) {
    		res[i] = minHeap.poll();
    	}
    	return res;
    }
}
