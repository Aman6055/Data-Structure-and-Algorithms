You are given the array paths, where paths[i] = [cityAi, cityBi] means there exists a direct path going from cityAi to cityBi. Return the destination city, that is, the city without any path outgoing to another city.

It is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.

Example 1:

Input: paths = [["London","New York"],["New York","Lima"],["Lima","Sao Paulo"]]
Output: "Sao Paulo" 
Explanation: Starting at "London" city you will reach "Sao Paulo" city which is the destination city. Your trip consist of: "London" -> "New York" -> "Lima" -> "Sao Paulo".
Example 2:

Input: paths = [["B","C"],["D","B"],["C","A"]]
Output: "A"
Explanation: All possible trips are: 
"D" -> "B" -> "C" -> "A". 
"B" -> "C" -> "A". 
"C" -> "A". 
"A". 
Clearly the destination city is "A".
Example 3:

Input: paths = [["A","Z"]]
Output: "Z"

public class DestinationCity {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		List<List<String>> paths = new ArrayList<List<String>>();
		ArrayList<String> a1 = new ArrayList<>();
		a1.add("London");
		a1.add("New York");
		
		paths.add(a1);
		
		ArrayList<String> a2 = new ArrayList<>();
		a2.add("New York");
		a2.add("Lima");
		
		paths.add(a2);
		
		ArrayList<String> a3 = new ArrayList<>();
		a3.add("Lima");
		a3.add("Sao Paulo");
		
		paths.add(a3);
		
		System.out.println(destCity(paths));

	}
    public static String destCity(List<List<String>> paths) {
    	Map<String, String> map = new HashMap<>();
    	for(List<String> path : paths) {
    		map.put(path.get(0), path.get(1));
    	}
      // London -> New York
      // New York -> Lima
      // Lima -> Sao Paulo
      
      //Iterate over values : if the value is present as a key, then path is available. So, return the one city where value is not present as a key.
      
    	for(String city : map.values()) {
    		if(!map.containsKey(city))
    			return city;
    	}
        return "";
    }

}
