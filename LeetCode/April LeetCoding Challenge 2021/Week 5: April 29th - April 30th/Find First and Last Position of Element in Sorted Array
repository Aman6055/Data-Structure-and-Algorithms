Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

Follow up: Could you write an algorithm with O(log n) runtime complexity?

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]

---------------------------------------------------
class Solution {
    public int[] searchRange(int[] nums, int target) {
      if(nums.length==0) return new int[] {-1,-1};
    	int left = findLeftMostIndex(nums, target);
        //if(left == -1) return new int[] {-1,-1};
        int right = findRightMostIndex(nums, target);
        return new int[] {left,right};
    }
    public static int findLeftMostIndex(int[] nums, int target) {
    	int leftIndex = -1;
    	int low = 0;
    	int high = nums.length-1;
    	
    	while(low<=high) {
    		int mid = (low+high)/2;
    		if(nums[mid] > target) high = mid-1; 
    		else if(nums[mid] < target) low = mid+1;
    		else {
    			leftIndex = mid;
    			high = mid-1;
    		}
    	}
    	return leftIndex;
    }
    public static int findRightMostIndex(int []nums, int target) {
    	int rightIndex = -1;
    	int low = 0;
    	int high = nums.length-1;
    	while(low<=high) {
    		int mid = (low+high)/2;
    		if(nums[mid] > target) high = mid-1;
    		else if(nums[mid]<target) low = mid+1;
    		else {
    			rightIndex = mid;
    			low = mid+1;
    		}
    	}
    	return rightIndex;
    }
}
