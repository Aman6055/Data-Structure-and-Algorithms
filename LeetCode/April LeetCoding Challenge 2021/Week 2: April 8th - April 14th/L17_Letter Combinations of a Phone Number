Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]

class Solution {
    public  List<String> letterCombinations(String digits) {
        List<String> result = new ArrayList<>();
        if (digits.length()==0) return result;
        Map<Character, String> map = new HashMap<>();
        map.put('2', "abc");
        map.put('3', "def");
        map.put('4', "ghi");
        map.put('5', "jkl");
        map.put('6', "mno");
        map.put('7', "pqrs");
        map.put('8', "tuv");
        map.put('9', "wxyz");
        int i=0;
        result.add("");
        while(i<digits.length()) {
        	result = findCombinations(map.get(digits.charAt(i)), result);
        	i++;
        }
        
        return result;
    }
    public static List<String> findCombinations(String s1, List<String> l) {
    	List<String> comb = new ArrayList<>();
    	for(int i=0 ; i<s1.length(); i++) {
    		for(String s : l) {
    			comb.add(s+s1.charAt(i));
    		}
    	}
    	return comb;
    }
}
